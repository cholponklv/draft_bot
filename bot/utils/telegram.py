import asyncio
import logging

import requests
from aiogram import Bot, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import FSInputFile
from urllib.parse import urlparse
from bot.schemas import AlertSchema
import os
BASE_DIR = "/Users/cholponklv/python/visionaibox"
bot: Bot = None
chat_id: str = None
django_api_url: str = None

def setup_telegram(bot_instance: Bot, chat_id_instance: str, api_url: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    global bot, chat_id, django_api_url
    bot = bot_instance
    chat_id = chat_id_instance
    django_api_url = api_url



async def send_alert_to_telegram(alert: AlertSchema):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–≤–æ–≥–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram –≤—Å–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ."""

    if not bot:
        raise RuntimeError("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ setup_telegram() –≤ __main__.py.")
    print(alert.users_telegram_id)
    telegram_ids = alert.users_telegram_id
    print(alert.users_telegram_id)
    if not telegram_ids:
        print(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–≤–æ–≥–∏ {alert.id} ‚Äî –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        logging.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–≤–æ–≥–∏ {alert.id} ‚Äî –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    message_text = (
        f"üö® <b>–¢—Ä–µ–≤–æ–≥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!</b>\n\n"
        f"üìç <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> {alert.device.name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"üé• <b>–ö–∞–º–µ—Ä–∞:</b> {alert.source.source_id} ({alert.source.ipv4})\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {alert.alert_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"ü§ñ <b>–ê–ª–≥–æ—Ä–∏—Ç–º:</b> {alert.alg.name}\n"
    )

    image_url = str(alert.image) if alert.image else None

    tasks = []  # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è asyncio.gather()

    for telegram_id in telegram_ids:
        if image_url:
            tasks.append(
                bot.send_photo(
                    chat_id=telegram_id,
                    photo=image_url,
                    # photo="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSJN7PAWG0Wug0MPkg_vs3P_20HOFTXxGCp_Q&s",
                    caption=message_text,
                    parse_mode="HTML"
                )
            )
        else:
            tasks.append(
                bot.send_message(
                    chat_id=telegram_id,
                    text=message_text,
                    parse_mode="HTML"
                )
            )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    results = await asyncio.gather(*tasks, return_exceptions=True)

    for user_id, result in zip(telegram_ids, results):
        if isinstance(result, Exception):
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–≤–æ–≥–∏ {alert.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {result}")
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–≤–æ–≥–∏ {alert.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {result}")
        else:
            print(f"–¢—Ä–µ–≤–æ–≥–∞ {alert.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            logging.info(f"–¢—Ä–µ–≤–æ–≥–∞ {alert.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")


async def send_alert_to_telegram_v2(alert: AlertSchema):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–≤–æ–≥—É –≤ Telegram.
    - –ï—Å–ª–∏ `for_security=True`, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.
    - –ï—Å–ª–∏ `for_security=False`, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫.
    """

    if not bot:
        raise RuntimeError("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ setup_telegram() –≤ __main__.py.")
    print(alert.users_telegram_id)
    telegram_ids = alert.users_telegram_id
    print(alert.users_telegram_id)
    if not telegram_ids:
        logging.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–≤–æ–≥–∏ {alert.id} ‚Äî –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    message_text = (
        f"üö® <b>–¢—Ä–µ–≤–æ–≥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!</b>\n\n"
        f"üìç <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> {alert.device.name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"üé• <b>–ö–∞–º–µ—Ä–∞:</b> {alert.source.source_id} ({alert.source.ipv4})\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {alert.alert_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"ü§ñ <b>–ê–ª–≥–æ—Ä–∏—Ç–º:</b> {alert.alg.name}\n"
        f"ü§ñ <b>ID —Ç—Ä–µ–≤–æ–≥–∏:</b> {alert.aibox_alert_id}\n"
    )

    image_url = str(alert.image) if alert.image else None

    tasks = []  # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è asyncio.gather()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–ª—É–∂–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if alert.for_security:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data=f"confirm_alert:{alert.id}"
        )
        keyboard.button(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=f"reject_alert:{alert.id}"
        )
        keyboard.adjust(2)  # –î–µ–ª–∞–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        reply_markup = keyboard.as_markup()
    else:
        reply_markup = None

    for telegram_id in telegram_ids:
        if image_url:
            url_parts = urlparse(image_url)
            if url_parts.hostname in ("127.0.0.1", "localhost"):
                relative_path = url_parts.path.lstrip("/")
                local_path = os.path.join(BASE_DIR, relative_path)
                if not os.path.exists(local_path):
                    logging.error(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_path}")
                    continue
                photo = FSInputFile(local_path)
            else:
                photo = image_url

            tasks.append(
                bot.send_photo(
                    chat_id=telegram_id,
                    photo=photo,
                    caption=message_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            )
        else:
            tasks.append(
                bot.send_message(
                    chat_id=telegram_id,
                    text=message_text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    results = await asyncio.gather(*tasks, return_exceptions=True)

    for user_id, result in zip(telegram_ids, results):
        if isinstance(result, Exception):
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–≤–æ–≥–∏ {alert.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {result}")
        else:
            logging.info(f"–¢—Ä–µ–≤–æ–≥–∞ {alert.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

async def register_user(message: types.Message, token: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Django API –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram ID.
    """
    try:
        print(1111)
        url = f"{django_api_url}/api/users/v1/register_telegram/"
        print(2222222)
        response = requests.post(url, json={"telegram_id": message.chat.id, "token": token})
        print(response.status_code)
        data = response.json()
        print(response.status_code)
        if response.status_code == 200:
            print(3333)
            user_info = data.get("user", {})
            company_name = user_info.get("company_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è")
            telegram_username = message.from_user.full_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ Telegram

            await message.answer(
                f"‚úÖ <b>{telegram_username}</b>, –≤–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
                f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company_name}",
                parse_mode="HTML"
            )
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {data.get('error', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')}")
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Django API: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
