import asyncio
import logging
import os
import requests
import uvicorn
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from dotenv import load_dotenv
from bot.api import app as fastapi_app
from bot.utils.telegram import setup_telegram, register_user

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = "777079324"  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–≤–æ–≥
DJANGO_API_URL = os.getenv("DJANGO_API_URL")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º `utils.telegram`
setup_telegram(bot, CHAT_ID, DJANGO_API_URL)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_handler(message: Message):
    args = message.text.split()  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã

    if len(args) > 1 and args[1].startswith("register_"):
        token = args[1].replace("register_", "")
        await register_user(message, token)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–≥–∏
@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_alert_handler(callback):
    alert_id = callback.data.split(":")[1]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Django –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    url = f"{DJANGO_API_URL}api/algorithms/v1/alerts/{alert_id}/send-action/"
    response = requests.post(url, json={"action": "confirm"})
    if response.status_code == 200:
        await callback.answer("‚úÖ –¢—Ä–µ–≤–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        await callback.message.delete_reply_markup()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—á—Ä–µ–¥–∏—Ç–µ–ª—è–º
        alert_data = response.json()
        executive_users = alert_data.get("executive_users", [])
        if executive_users:
            await send_alert_to_executives(alert_data)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–≥–∏!", show_alert=True)


# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–≥–∏
@dp.callback_query(F.data.startswith("reject_"))
async def reject_alert_handler(callback):
    alert_id = callback.data.split(":")[1]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Django –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    url = f"{DJANGO_API_URL}api/algorithms/v1/alerts/{alert_id}/send-action/"
    response = requests.post(url, json={"action": "reject"})
    if response.status_code == 200:
        await callback.answer("üö´ –¢—Ä–µ–≤–æ–≥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!", show_alert=True)
        await callback.message.delete_reply_markup()
        # # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–µ–∫—Å—Ç: –≤ `text` –∏–ª–∏ `caption`
        # if callback.message.text:
        #     new_text = callback.message.text + "\n\n‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>"
        #     await callback.message.edit_text(new_text, parse_mode="HTML", reply_markup=None)
        # elif callback.message.caption:
        #     new_caption = callback.message.caption + "\n\n‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>"
        #     await callback.message.edit_caption(new_caption, parse_mode="HTML", reply_markup=None)

    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–≥–∏!", show_alert=True)


# üìå –û—Ç–ø—Ä–∞–≤–∫–∞ —É—á—Ä–µ–¥–∏—Ç–µ–ª—è–º
async def send_alert_to_executives(alert_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–≤–æ–≥—É —É—á—Ä–µ–¥–∏—Ç–µ–ª—è–º –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –°–ë."""
    executive_ids = alert_data.get("executive_users", [])
    message_text = f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞!</b>\n\n{alert_data.get('message', '')}"

    tasks = []
    for user_id in executive_ids:
        tasks.append(bot.send_message(chat_id=user_id, text=message_text, parse_mode="HTML"))

    await asyncio.gather(*tasks, return_exceptions=True)

@dp.message(Command("id"))
async def send_chat_id(message: Message):
    await message.answer(f"–í–∞—à chat_id: {message.chat.id}")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo_handler(message: Message):
    await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def start_fastapi():
    """–ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –±–æ—Ç—É."""
    config = uvicorn.Config(fastapi_app, host="0.0.0.0", port=8002, log_level="info")
    server = uvicorn.Server(config)
    await server.serve()

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ FastAPI —Å–µ—Ä–≤–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."""
    await asyncio.gather(dp.start_polling(bot), start_fastapi())

if __name__ == "__main__":
    asyncio.run(main())
